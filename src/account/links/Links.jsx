import React, { useState, useEffect } from 'react';
// –£–±–µ—Ä–∏ –∏–º–ø–æ—Ä—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –ø—Ä–∏–¥—É—Ç –∏–∑ API
// import { ReactComponent as ScheduleIcon } from './../../assets/svg/arrow_down.svg';
// import { ReactComponent as DiplomaIcon } from './../../assets/svg/arrow_down.svg';
// import { ReactComponent as ResourcesIcon } from './../../assets/svg/arrow_down.svg';
import LinkComponent from './Link'; // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ç–µ–≥–æ–º <a> (–µ—Å–ª–∏ Link - —ç—Ç–æ <a>)
import styles from './Links.module.css';
import LoadingSpinner from '../../Components/loader/LoadingSpinner'; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏

const Links = () => {
    const [linksData, setLinksData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const apiUrl = `${process.env.REACT_APP_API_URL}/important_links/`; // –ü—Ä–æ–≤–µ—Ä—å URL

    useEffect(() => {
        let isMounted = true; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        const fetchLinks = async () => {
            setLoading(true);
            setError(null);
            try {
                const response = await fetch(apiUrl); // GET-–∑–∞–ø—Ä–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (!response.ok) {
                    let errorDetail = `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${response.status}`;
                    try {
                         const errorData = await response.json();
                         if (errorData && errorData.detail) {
                             errorDetail = errorData.detail;
                         }
                    } catch(e) { /* –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON */ }
                    throw new Error(errorDetail);
                }
                const data = await response.json();
                if (isMounted) {
                    setLinksData(data || []); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                }
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫:", err);
                if (isMounted) {
                    setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Å—ã–ª–∫–∏.');
                }
            } finally {
                if (isMounted) {
                    setLoading(false);
                }
            }
        };

        fetchLinks();

        // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
        return () => {
            isMounted = false;
        };
    }, [apiUrl]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç apiUrl (—Ö–æ—Ç—è –æ–Ω –æ–±—ã—á–Ω–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)

    // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
    if (loading) {
        return (
             <div className={styles.main_block}>
                 <div className={styles.status_container}>
                     <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Å—ã–ª–æ–∫..." />
                 </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className={styles.main_block}>
                 <div className={`${styles.status_container} ${styles.error}`}>
                    <p>–û—à–∏–±–∫–∞: {error}</p>
                 </div>
            </div>
        );
    }

     if (linksData.length === 0) {
        return (
            <div className={styles.main_block}>
                <div className={styles.status_container}>
                     <p>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.</p>
                 </div>
            </div>
        );
    }

    // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ ---
    return (
        <div className={styles.main_block}>
            <div className={styles.account_container}>
                {linksData.map((link) => (
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç LinkComponent –∏–ª–∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—Ä—è–º–æ –∑–¥–µ—Å—å
                    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ï—Å–ª–∏ LinkComponent –æ–∂–∏–¥–∞–µ—Ç href, text –∏ —ç–ª–µ–º–µ–Ω—Ç –∏–∫–æ–Ω–∫–∏
                    /*
                    <LinkComponent
                        key={link.id}
                        href={link.link}
                        text={link.link_text}
                        icon={link.icon ? (
                                <span
                                    className={styles.apiSvgIcon} // –î–æ–±–∞–≤—å —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞/—Ü–≤–µ—Ç–∞
                                    dangerouslySetInnerHTML={{ __html: link.icon }}
                                />
                            ) : (
                                <DefaultIcon /> // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∫–æ–Ω–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            )
                        }
                    />
                    */

                    // –í–∞—Ä–∏–∞–Ω—Ç 2: –†–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –µ—Å–ª–∏ LinkComponent –Ω–µ –Ω—É–∂–µ–Ω –∏–ª–∏
                    // —Ç—ã —Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–∞)
                    <a
                        key={link.id}
                        href={link.link}
                        className={styles.linkItem} // –î–æ–±–∞–≤—å —Å—Ç–∏–ª–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Å—ã–ª–∫–∏
                        target="_blank" // –û—Ç–∫—Ä—ã–≤–∞—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                        rel="noopener noreferrer" // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è target="_blank"
                    >
                        {link.icon && (
                            <span
                                className={styles.apiSvgIcon} // –°—Ç–∏–ª–∏–∑—É–π —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –≤ CSS
                                dangerouslySetInnerHTML={{ __html: link.icon }}
                            />
                        )}
                        {/* –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∏ –Ω–µ—Ç, –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –Ω–∏—á–µ–≥–æ */}
                        {!link.icon && (
                             <span className={styles.defaultIconPlaceholder}>üîó</span> // –ü—Ä–æ—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞-–∑–∞–≥–ª—É—à–∫–∞
                        )}
                        <span className={styles.linkText}>
                            {/* –ó–∞–º–µ–Ω—è–µ–º \n –Ω–∞ <br /> –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ */}
                            {link.link_text.split('\\n').map((line, i, arr) => (
                                <React.Fragment key={i}>
                                    {line}
                                    {i < arr.length - 1 && <br />}
                                </React.Fragment>
                            ))}
                        </span>
                         {/* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–∏ */}
                         <span className={styles.externalLinkIcon}>‚Üó</span>
                    </a>
                ))}
            </div>
        </div>
    );
};

export default Links;